aapl,142
bac,480
bwld,320
c,8
crox,65
rmcc,600
jsda,214
pot,54
rimm,18
#fields: purchase date,purchase price,shares purchased, purchase commission,??total cost..just sum of those prev, current price
#items to calculate:total gain/loss, annualized return,include price to sell in cost of return
#place data in sqlite database. when retrieve data update current stock price. (won't need date for this guy since it should be update every time we run script. in worst case just look at the timestamp on the database for the time when the data was pulled.
#format output nicely
#use xml??
#write in C,C++ using libaries, Java, Python, bash,, Perl, awk
#frontend to add new investments.

#!/bin/bash
function ComputeYearsSincePUrchase()
{
PurchaseDate=${1} #or could query for it. here and have it returned to this variable. write a generic query funciton.


PurchaseYear=$(PurchaseDate:0:4)
PurchaseMonth=$(PurchaseDate:5:2)
PurchaseDay=$(PurchaseDate:8:2)

CurrentYear=$( date +%Y )
CurrentDayofYear=$( date +%j ) #include leading 0
CurrentDayofYearStripped=${CurrentDayofYear//0} #find longest 0 pattern and replace with nothing
CurrentMonth=$( date +%m )
CurrentDay=$( date +%d ) #use --utc for utc time

}

function isLeapYear()
{
flag=0
Year=$( date +%Y )
#Remainder=$( $year % 4 ) #Leap years are divisible by 4
let "Remainder = $Year % 4 "
if [[ $Remainder -eq 0 ]]
then 
flag=1
fi
echo $flag
}

function DayOfYear()
{
#calc once per stock then enter into database so isn't always being recalculated
year=$1
month=$2
day=$3
# 31 28 31 30 31 30 31 31 30 31 30 31- 
DaysArray=( 0 0 31 59 90 120 151 181 212 243 273 304 334 365 ) #prepend with another 0 so can use month to index array; array lists # of days passed up to the current month.
#mutliple ways to do this. simply use a cascaded if statement from dec down to jan and add days in month, at end see if leapyear and add one more to the count.
#just tdo a simply switch / case statement
#use a LUT and look up days there.
daysInMonthsPast=$DaysArray[$month]
leapyear=$( isLeapYear )

#if [[ leapyear -eq 1 ]]
#then
#since leapyear returns 1 if it is a leapyear and 0 if it isn't we can just add what is returned as that is what we would do anyway.
let "dayofyear = $leapyear + $day + $daysInMonthsPast "
echo $dayofyear
}

function PercentOfYear()
{
year=$1
month=$2
day=$3
DoY=$( DayOfYear $month $day )
leapyear=$( isLeapYear )
let "days = $leapyear + $DoY"
let "year = $leapyear + 365"
percentYear=$( echo "scale=2; $days/$year" | bc )
echo $percentYear

}
