select distinct(stockticker) from bc20;
select distinct(date) from bc20;
select count(distinct(date)) from bc20;
select count(distinct(stockticker)) from bc20;
select count(*) from bc20 where stockticker like "aapl";
select date from bc20 where stockticker like "aapl" order by date asc;
select date from bc20 where stockticker like "aapl" order by date desc;
select date from bc20 where stockticker like "aapl" order by date asc limit 1;
select date from bc20 where stockticker like "aapl" order by date desc limit 1;

select distinct(date) from bc20 limit 2 offset 0;
sqlite3 IBDdatabase.sqlite "select distinct(date) from bc20 order by date desc limit 2 offset 0;"

To create a matrix of rankings for a single stock:
get the list of available dates (possibly set all ranks to 0)
get the date,rank data for that stock.
use the date as the index to set the rank for the date.
Loop through and for all empty rankings have a decrementing counter and set the rank to that.


Create script that will go through and get stock data for the specified stock on the date+1 given
but want it to be displayed/viewable online! Interface database w/ java or javascript utlities.


sqlite3 IBDdatabase.sqlite "select distinct stockticker from IBD50" > IBD50StockTickerList.txt
sqlite3 IBDdatabase.sqlite "select count(*) from BC20 where stockticker like 'alxn' and rank = 1 and date like '2012-09-18'"
sqlite3 IBDdatabase.sqlite "select * from BC20 where Date='2012-07-31'"
sqlite3 IBDdatabase.sqlite "select distinct date from BC20"
sqlite3 IBDdatabase.sqlite "drop IBD50StockData"


sqlite3 IBDdatabase.sqlite " select count(*) from BC20StockData where id not in ( select min(id) from BC20StockData group by rank,stockticker,date ) "

#delete duplicate records
sqlite3 IBDdatabase.sqlite " delete from BC20StockData where id not in ( select min(id) from BC20StockData group by rank,stockticker,date ) "

#trying to match across tables
sqlite3.exe IBDdatabaseMod.sqlite " select * from BC20 where id not in ( select BC20.id from BC20 LEFT JOIN BC20StockData WHERE BC20.rank=BC20StockData.rank and BC20.stockticker=BC20StockData.stockticker and BC20.date=BC20StockData.date ) "

select * from BC20StockData where StockTicker like "PCLN" and Rank=1 and Date="2012-05-08"

#this should return 0 records, stating that we don't have duplicates in BC20
select * from BC20 where id not in ( select min(id) from BC20 group by rank,stockticker,date )

#show duplicates in BC20StockData
select * from BC20StockData where id not in ( select min(id) from BC20StockData group by rank,stockticker,date )

There will be a discrepancy between the number of BC20 records and BC20StockData records due to ticker changes/removals

sqlite3 IBDdatabase.sqlite .schema
sqlite3 IBDdatabase.sqlite .table

#output a 1 if table exists
sqlite3 IBDdatabase.sqlite " select case when tbl_name ='BC20' then 1 else 0 end  from sqlite_master where type='table' and name='BC20' order by name"

#attempt at inner join. phail
time sqlite3.exe IBDdatabase.sqlite "select B.rank, B.stockticker,B.date,A.Close from BC20 B INNER JOIN BC20StockData A on B.date = A.date INNER JOIN BC20StockData C on C.rank=A.rank INNER JOIN BC20StockData D on D.stockticker=A.stockticker where B.date='?' or C.rank='?' or D.stockticker='?'"
#decided to just normalize the db instead of abusing it. 
sqlite3 IBDdatabase.sqlite "select count(distinct(date)) from BC20"
sqlite3 IBDdatabase.sqlite "select count(rank) from BC20 where stockticker like 'alxn'"

sqlite3 IBDdatabase.sqlite "select stockticker,rank,date from BC20 where stockticker like 'alxn' order by date asc"


sqlite3 IBDdatabase.sqlite "select distinct(date) from bc20  where date > '2012-10-17' order by date asc"
2012-10-23
2012-10-30
2012-11-06
2012-11-13
2012-11-20
[arch-nicky@arch-nicky IBD]$ sqlite3 IBDdatabase.sqlite "select * from BC20 INNER Join IBD50 on BC20.StockTicker = IBD50.StockTicker limit 4;
> "
3|2012-11-20|V|3|4524|2011-08-01|V|42
3|2012-11-20|V|3|4561|2011-08-08|V|29
3|2012-11-20|V|3|4611|2011-08-15|V|29
3|2012-11-20|V|3|4652|2011-08-22|V|20
[arch-nicky@arch-nicky IBD]$ sqlite3 IBDdatabase.sqlite "select BC20.StockTicker,IBD50.Rank from BC20 INNER Join IBD50 on BC20.StockTicker = IBD50.StockTicker limit 4;"
V|4
V|5
V|7
V|7
[arch-nicky@arch-nicky IBD]$ sqlite3 IBDdatabase.sqlite "select BC20.StockTicker,IBD50.Rank from BC20 INNER Join IBD50 on BC20.StockTicker = IBD50.StockTicker limit 4;"


//create a list of the dates & ranks for a ticker with all dates; ie if no entry was found we have an empty field for that date's rank.
create temp table DatesList as select distinct(date) from BC20;
create temp table TickerDetails as select rank,date from BC20 where stockticker like "BIIB";
select * from DatesList left outer join TickerDetails on DatesList.date = TickerDetails.date;

//using the above 'create' statements
create temp table CombinedDatesTickerDetails as select * from DatesList left outer join TickerDetails on DatesList.date = TickerDetails.date;
select * from PRGO inner join CombinedDatesTickerDetails on PRGO.date = CombinedDatesTickerDetails.date;  //here PRGO is the yahoo historical stock data that we download
select * from BIIB inner join CombinedDatesTickerDetails on BIIB.date = CombinedDatesTickerDetails.date;  //here BIIB is the yahoo historical stock data that we download
//the resultant table should be a list of dates w rank and corresponding stock price. the stock price (shoudl) be present whether a rank is present or not. 

#Tue Dec 24 15:45:19 EST 2013
select stockticker,count(stockticker) as count_stockticker from BC20 group by stockticker;
create temp table TimesOnList as select stockticker,count(stockticker) from BC20 group by stockticker;
select * from TimesOnList order by "count(stockticker)" desc;


#Wed Dec 25 15:01:45 EST 2013
---> you really need to use AS statements so that you know what the columns of data are and can access them.

//create a list of the dates & ranks for a ticker with all dates; ie if no entry was found we have an empty field for that date's rank.
CREATE TEMPORARY TABLE DatesList AS SELECT DISTINCT(date) AS distinct_date FROM BC20;
CREATE TEMPORARY TABLE TickerDetails AS SELECT rank,date FROM BC20 WHERE stockticker LIKE "${ticker}";
SELECT * FROM DatesList LEFT OUTER JOIN TickerDetails ON DatesList.date = TickerDetails.date;

//the resultant table should be a list of dates w rank and corresponding stock price. the stock price (shoudl) be present whether a rank is present or not. 
CREATE TEMPORARY TABLE DatesList AS SELECT DISTINCT(date) AS distinct_date FROM BC20;
CREATE TEMPORARY TABLE ${ticker}Details AS SELECT rank,date FROM BC20 WHERE stockticker LIKE "${ticker}";
CREATE TEMPORARY TABLE CombinedDates%{ticker}Details AS SELECT * FROM DatesList LEFT OUTER JOIN ${ticker}Details ON DatesList.date = ${ticker}Details.date;
--> use variable for these: here ${ticker} is the yahoo historical stock data that we download
SELECT * FROM ${ticker} INNER JOIN CombinedDates${ticker}Details ON ${ticker}.date = CombinedDates${ticker}Details.date;  


SELECT stockticker,count(stockticker) AS count_stockticker FROM BC20 GROUP BY stockticker;
CREATE TEMPORARY TABLE TimesOnList AS SELECT stockticker,count(stockticker) AS count_sticker FROM BC20 GROUP BY stockticker;
SELECT * FROM TimesOnList ORDER BY count_sticker DESC; /// --> alternate method to "count(stockticker)" desc;


#########
databasefilename="IBDTestDatabaseBC20.sqlite"
databaselist=('BC20' 'IBD50' '8585' 'Top200Composite')
for database in $databaselist
do 
sqlite3 $databasefilename "CREATE TEMPORARY TABLE TimesOnList AS SELECT stockticker,count(stockticker) AS count_sticker FROM $database GROUP BY stockticker;"
sqlite3 $databasefilename "CREATE TEMPORARY TABLE DatesList AS SELECT DISTINCT(date) AS distinct_date FROM $database;"

tickerlist=$(sqlite3 $databasefilename  "select distinct(stockticker) from $database")
for ticker in $tickerlist do 

sqlite3 $databasefilename "CREATE TEMPORARY TABLE ${ticker}Details AS SELECT rank,date FROM BC20 WHERE stockticker LIKE ${ticker};"
sqlite3 $databasefilename "CREATE TEMPORARY TABLE CombinedDates${ticker}Details AS SELECT * FROM DatesList LEFT OUTER JOIN ${ticker}Details ON DatesList.date = ${ticker}Details.date;"
sqlite3 $databasefilename "SELECT * FROM ${ticker} INNER JOIN CombinedDates${ticker}Details ON ${ticker}.date = CombinedDates${ticker}Details.date;" 
done
done

#the date values must be quoted.
select * from BC20 where date > "2012-12-31" and date < "2014-01-01";
